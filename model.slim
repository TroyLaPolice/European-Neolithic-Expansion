initialize()
{
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(dimensionality="xy", periodicity="");
	
	// ---------------------------------------------------
	//  PARAMETERS --> Initialize Constant Params
	// ---------------------------------------------------
	// Carrying Capacities and Pop Sizes:
	// ***********************************
	defineConstant("SN", 2000); // Starting number of individuals
	defineConstant("HGK", 0.00094); // carrying capacity for HGs (ENTER IN INDIVIDUALS PER KM2) for density dependent scaling 
	defineConstant("FK", 0.00128); // carrying capacity for farmers (ENTER IN INDIVIDUALS PER KM2) for density dependent scaling
	
	// Movement and interaction Distances (ENTER IN KILOMETERS):
	// ***********************************
	defineConstant("S", 30); // spatial competition distance
	defineConstant("MD", 30); // Mating distance
	defineConstant("LD", 10); // Learning distance
	defineConstant("OMD", 15); // Offspring movement away from parents. Right now OMD is the same for both populations but we could make it unique
	defineConstant("FMD", 7); // How far farmers diffuse away from their location
	defineConstant("HGMD", 30); // How far HGs diffuse away from their location
	defineConstant("northern_slowdown_effect", 2); // Number equals the effect of the slowdown in the north (i.e., how many times slower do they move
	defineConstant("northern_slowdown_distance", 0.3); // 
	
	// Learning, death and mating rate params:
	// ***********************************
	defineConstant("L", 0.02); // Learning rate 
	defineConstant("LP", 0.6); // Learning percentage = the ratio of farmers to HGs required in an area for an individual HG to learn from a farmer 
	defineConstant("HGM", 0.1); // HG fertility rate
	defineConstant("FM", 0.2); // Farmer fertility rate
	defineConstant("IM", 0.02); // Interbreeding fertility rate
	defineConstant("min_repro_age", 0); // Individuals MUST be OLDER than this age to reproduce
	
	// Age related mortality table
	defineConstant("age_scale", c(0.211180124, 0.211180124, 0.211180124, 0.211180124, 0.211180124, 0.251968504, 0.251968504, 0.251968504, 0.251968504, 0.251968504, 0.105263158, 0.105263158, 0.105263158, 0.105263158, 0.105263158, 0.164705882, 0.164705882, 0.164705882, 0.164705882, 0.164705882, 0.164705882, 0.253521127, 0.253521127, 0.253521127, 0.253521127, 0.253521127, 0.301886792, 0.301886792, 0.301886792, 0.301886792, 0.301886792, 0.378378378, 0.378378378, 0.378378378, 0.378378378, 0.378378378, 0.47826087, 0.47826087, 0.47826087, 0.47826087, 0.47826087, 0.583333333, 0.583333333, 0.583333333, 0.583333333, 0.583333333, 0.6, 0.6, 0.6, 0.6, 0.6, 1.0));
	
	// ---------------------------------------------------
	// RUN TIME PREFERENCE PARAMETERS
	// ---------------------------------------------------
	// Determine Coloring Schemes:
	// ***********************************	
	defineConstant("Color_scheme", 1); // Parameter of 0 = Genomic Coloring, 1 = Behavioral Coloring
	defineConstant("Color_option1", 0); // Parameter of 0 = No special color for 1st generation 'hybrid' offspring, 1 = Coloring for 1st generation 'hybrid' offspring
	defineConstant("Color_option2", 1); // Parameter of 0 = No special color for 1st generation HG individuals who have learned, 1 = Coloring for 1st generation HG individuals who have learned
	
	// Map Prefs: 
	// ***********************************	
	defineConstant("map_style", 5); // Parameter of 0 = no topography, 1 = super light topopgraphy, 2 = light topography, 3 = regular topography, 4 heavy topography, 5 = square
	defineConstant("mapfile_none", "C:/Users/troyl/OneDrive/School/Documents/Grad School/Huber Lab/EEA_map_water.png"); // File Path to Map Image
	defineConstant("mapfile_topo_superlight", "C:/Users/troyl/OneDrive/School/Documents/Grad School/Huber Lab/EEA_map_topo_superlight_water.png"); // File Path to Map Image
	defineConstant("mapfile_topo_light", "C:/Users/troyl/OneDrive/School/Documents/Grad School/Huber Lab/EEA_map_topo_light_water.png"); // File Path to Map Image
	defineConstant("mapfile_topo_regular", "C:/Users/troyl/OneDrive/School/Documents/Grad School/Huber Lab/EEA_map_topo_regular_water.png"); // File Path to Map Image
	defineConstant("mapfile_topo_heavy", "C:/Users/troyl/OneDrive/School/Documents/Grad School/Huber Lab/EEA_map_topo_heavy_water.png"); // File Path to Map Image
	defineConstant("square", "C:/Users/troyl/OneDrive/School/Documents/Grad School/Huber Lab/square.png"); // File Path to Map Image
	
	// If using provided EEA maps, length and width for map style images should be kept at a 1 to 1 aspect ratio (square) to avoid distortion
	defineConstant("map_size_length", 3700);
	defineConstant("map_size_width", 3700);
	
	// Map citation: https://www.eea.europa.eu/data-and-maps/figures/elevation-map-of-europe
	// ----------------------------------------------------
	//  GENETIC COMPONENT --> Initialize Genomic Elements
	// ----------------------------------------------------
	initializeMutationType("m1", 0.5, "f", 0.0); // Tag farmer ancestry
	m1.convertToSubstitution = F;
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 2999);
	initializeMutationRate(0.0);
	initializeRecombinationRate(0.01);
	
	// ---------------------------------------------------
	//  INTERACTIONS --> Interaction Initialization
	// ---------------------------------------------------
	// spatial competition
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=S);
	
	// spatial mate choice
	initializeInteractionType(2, "xy", reciprocal=T, maxDistance=MD);
	
	// spatial mate choice
	initializeInteractionType(3, "xy", reciprocal=T, maxDistance=LD);
}

first()
{
	// look for mates
	i2.evaluate();
}

reproduction()
{
	// ---------------------------------------------------
	//  MATING --> Individuals mate with those close by
	// ---------------------------------------------------
	// choose nearest neighbor as a mate, within the max distance
	if (individual.age > min_repro_age) // Reproductive age of the individual must be reached before mating
	{
		mate = i2.nearestNeighbors(individual, 1);
		if (mate.size())
		{
			if (mate.age > min_repro_age) // Reproductive age of the individual must be reached before mating
			{
				if (individual.z != mate.z)
					M = IM;
				if (individual.z == mate.z & individual.z == 1)
					M = FM;
				if (individual.z == mate.z & individual.z == 0)
					M = HGM;
				
				// Frequency of the interaction
				for (i in seqLen(rpois(1, M)))
				{
					// Only runs if a mate is nearby
					if (mate.size())
					{
						offspring = subpop.addCrossed(individual, mate);
						
						// -----------------------
						// Color Based on Genotype
						// -----------------------
						value = offspring.countOfMutationsOfType(m1) / 6000;
						offspring.color = rgb2color(hsv2rgb(c(0.6, 1.0, value)));
						
						// Define z param in offspring (phenotype, 0 = HG, 1 = Farmer)
						offspring.z = 0;
						
						// If both parents are farmers the child is a farmer
						if (individual.z == 1 & mate.z == 1)
							offspring.z = 1;
						if (Color_scheme == 1)
						{
							// -----------------------
							// Color Based on Behavior
							// -----------------------
							// Add color to represent phenotype
							if (offspring.z == 0)
								offspring.color = "red";
							else
								offspring.color = "blue";
						}
						
						// If the one parent is a farmer and one parent is a HG,
						// offspring becomes a farmer
						if (individual.z != mate.z)
						{
							offspring.z = 1;
							if (Color_option1 == 1)
							{
								if (offspring.z == 1)
									offspring.color = "purple"; // Color Based on Behavior
							}
						}
						
						// set offspring position 
						if (map_style != 5 & individual.y > northern_slowdown_distance * map_size_length)
						{
							do
								pos = individual.spatialPosition + rnorm(2, 0, OMD / northern_slowdown_effect);
							while (!p1.pointInBounds(pos) | p1.spatialMapValue("map_object", pos) == 0.0);
							offspring.setSpatialPosition(pos);
						}
						else
						{
							do
								pos = individual.spatialPosition + rnorm(2, 0, OMD);
							while (!p1.pointInBounds(pos) | p1.spatialMapValue("map_object", pos) == 0.0);
							offspring.setSpatialPosition(pos);
						}
					}
				}
			}
		}
	}
}

late()
{
	// ---------------------------------------------------
	//  LEARNING --> HGs learn to farm from nearby farmers
	// ---------------------------------------------------
	i3.evaluate();
	for (individual in p1.individuals)
	{
		if (individual.z == 1)
			next;
		
		// Get a vector the nearest neighbors within the learning distance (D) 
		neighbors = i3.nearestNeighbors(individual);
		
		// Get ratio of HGs to farmers in the neighbors of the individual
		neighbor_freq = (sum(neighbors.z) / length(neighbors));
		
		// If the HG is surrounded by a certain ratio of farmers (LP) it has the ablity to convert to farming by learning
		if (neighbor_freq >= LP)
		{
			// choose nearest neighbor as a teacher, within the max distance
			teacher = i3.nearestNeighbors(individual, 1);
			
			// Frequency of the interaction
			for (i in seqLen(rpois(1, L)))
			{
				// Only runs if a potential teacher is nearby
				if (teacher.size())
				{
					// If teacher is a farmer and individual is a HG
					if (teacher.z == 1)
					{
						if (Color_option2 == 1)
						{
							// -----------------------
							// Color Based on Behavior
							// -----------------------
							// Change the HG to green to see the interaction
							// and change its phenotype (z coordinate) from 0 to 1
							// to represent the conversion to farmer
							// Only first generation HG -> F converts are green
							individual.color = "green";
						}
						individual.z = 1;
					}
				}
			}
		}
	}
}

1 early()
{
	sim.addSubpop("p1", SN);
}

late()
{
	i1.evaluate();
	
	// define vector of farmers and vector of HGs
	farmers = p1.individuals[p1.individuals.z == 1];
	HGs = p1.individuals[p1.individuals.z == 0];
	
	// spatial competition provides density-dependent selection
	// Count number of neighbors within S for farmers and hunter gatherers
	farmers_num_in_s = i1.interactingNeighborCount(farmers);
	HG_num_in_s = i1.interactingNeighborCount(HGs);
	
	// life table based individual mortality
	farmer_ages = farmers.age;
	HG_ages = HGs.age;
	
	// calculate chance of survival by refering to the mortality table by age and subtracting the chance of mortality from one
	farmer_survival = 1 - age_scale[farmer_ages];
	HG_survival = 1 - age_scale[HG_ages];
	
	// density-dependence, factoring in individual mortality
	farmers.fitnessScaling = ((PI * (S^2) * FK + 1) / (farmers_num_in_s + 1) * farmer_survival);
	HGs.fitnessScaling = ((PI * (S^2) * HGK + 1) / (HG_num_in_s + 1) * HG_survival);
}

late()
{
	// move around
	for (ind in p1.individuals)
	{
		// How far farmers diffuse away from their location
		if (ind.z == 1)
		{
			if (map_style != 5 & ind.y > northern_slowdown_distance * map_size_length)
			{
				do
					newPos = ind.spatialPosition + runif(2, -FMD / northern_slowdown_effect, FMD / northern_slowdown_effect);
				while (!p1.pointInBounds(newPos) | p1.spatialMapValue("map_object", newPos) == 0.0);
				ind.setSpatialPosition(newPos);
			}
			else
			{
				do
					newPos = ind.spatialPosition + runif(2, -FMD, FMD);
				while (!p1.pointInBounds(newPos) | p1.spatialMapValue("map_object", newPos) == 0.0);
				ind.setSpatialPosition(newPos);
			}
		}
		if (ind.z == 0)
		{
			// How far HGs diffuse away from their location
			do
				newPos = ind.spatialPosition + runif(2, -HGMD, HGMD);
			while (!p1.pointInBounds(newPos) | p1.spatialMapValue("map_object", newPos) == 0.0);
			ind.setSpatialPosition(newPos);
		}
	}
}

1 early()
{
	// Check user input for what style of topogrpahy they want on the map
	if (map_style == 0)
		mapImage = Image(mapfile_none); //none
	else if (map_style == 1)
		mapImage = Image(mapfile_topo_superlight); //superlight
	else if (map_style == 2)
		mapImage = Image(mapfile_topo_light); //light
	else if (map_style == 3)
		mapImage = Image(mapfile_topo_regular); //regular
	else if (map_style == 4)
		mapImage = Image(mapfile_topo_heavy); //heavy
	else if (map_style == 5)
		mapImage = Image(square); //square
	
	// Set up map
	p1.setSpatialBounds(c(0.0, 0.0, map_size_width, map_size_length));
	p1.defineSpatialMap("map_object", "xy", 1.0 - mapImage.floatK, valueRange=c(0.0, 1.0), colors=c("#ffffff", "#000000"));
	
	// place individuals on the map
	for (ind in p1.individuals)
	{
		do
			newPos = c(runif(1, 0, map_size_width), runif(1, 0, map_size_length));
		while (!p1.pointInBounds(newPos) | p1.spatialMapValue("map_object", newPos) == 0.0);
		ind.setSpatialPosition(newPos);
	}
	
	// Define z param in offspring (phenotype, 0 = HG, 1 = Farmer)
	// Make individuals near anatolia and greece farmers or near the edge if using the square
	//
	if (map_style == 5)
		p1.individuals[p1.individuals.x > (0.98 * map_size_width)].z = 1;
	else
		p1.individuals[p1.individuals.x > (0.72 * map_size_width) & p1.individuals.y < (0.09 * map_size_length)].z = 1;
	
	// Tag genomic ancestry of farmers with marker mutations (m1)
	// Each marker mutation represents 1Mb
	indFarmers = p1.individuals[p1.individuals.z == 1];
	indFarmers.genomes.addNewMutation(m1, 0.0, 0:2999);
	
	// Add color to represent phenotype
	for (i in p1.individuals)
	{
		// -----------------------
		// Color Based on Phenotype
		// -----------------------
		value = i.countOfMutationsOfType(m1) / 6000;
		i.color = rgb2color(hsv2rgb(c(0.6, 1.0, value)));
		if (Color_scheme == 1)
		{
			// -----------------------
			// Color Based on Behavior
			// -----------------------
			// HGs are red, farmers are blue
			if (i.z == 0)
				i.color = "red";
			else
				i.color = "blue";
		}
	}
}

1:10000 late()
{
	// log the ratio of farmers in the total population to file
	ratio = paste(sim.generation, (sum(p1.individuals.z) / p1.individuals.length()));
	writeFile("C:/Users/troyl/OneDrive/School/Documents/Grad School/Huber Lab/sim_farmer_ratio.txt", ratio, append=T);
}
